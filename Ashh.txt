import React, { useEffect, useRef, useState } from 'react';
import tus from 'tus-js-client';

const FileUploader = () => {
  const [files, setFiles] = useState([]);
  const tusClientRef = useRef(null);

  useEffect(() => {
    const createTusClient = (file) => {
      const upload = new tus.Upload(file, {
        endpoint: 'http://your-upload-endpoint', // Replace with your upload endpoint URL
        retryDelays: [0, 1000, 3000, 5000], // Retry delays in milliseconds
        chunkSize: 5 * 1024 * 1024, // 5MB chunk size
        metadata: {
          filename: file.name,
          filetype: file.type,
        },
        onError: (error) => {
          console.error('Tus upload error', error);
        },
        onProgress: (bytesUploaded, bytesTotal) => {
          const progress = (bytesUploaded / bytesTotal) * 100;
          const updatedFiles = files.map((f) => {
            if (f.id === file.id) {
              return { ...f, progress };
            }
            return f;
          });
          setFiles(updatedFiles);
        },
        onSuccess: () => {
          console.log('Tus upload success');
        },
      });

      return upload;
    };

    const handleFileChange = (event) => {
      const selectedFiles = Array.from(event.target.files);
      const newFiles = selectedFiles.map((file) => ({
        id: file.name,
        name: file.name,
        size: file.size,
        progress: 0,
      }));

      setFiles((prevFiles) => [...prevFiles, ...newFiles]);

      selectedFiles.forEach((file) => {
        const tusUpload = createTusClient(file);
        tusUpload.start();
      });
    };

    tusClientRef.current = { createTusClient };

    return () => {
      // Cancel and clean up tus uploads on component unmount
      if (tusClientRef.current) {
        tusClientRef.current.abort();
      }
    };
  }, []);

  return (
    <div>
      <input type="file" multiple onChange={handleFileChange} />
      <ul>
        {files.map((file) => (
          <li key={file.id}>
            {file.name} - {file.size} bytes - {file.progress.toFixed(2)}% uploaded
          </li>
        ))}
      </ul>
    </div>
  );
};

export default FileUploader;

import React, { createContext, useState } from 'react';

export const UploadContext = createContext();

export const UploadProvider = ({ children }) => {
  const [uploads, setUploads] = useState([]);

  const addUpload = (file) => {
    setUploads([...uploads, file]);
  };

  const removeUpload = (file) => {
    setUploads(uploads.filter((upload) => upload !== file));
  };

  return (
    <UploadContext.Provider value={{ uploads, addUpload, removeUpload }}>
      {children}
    </UploadContext.Provider>
  );
};


import React from 'react';
import { UploadProvider } from './UploadContext';
import YourComponent from './YourComponent';

const App = () => {
  return (
    <UploadProvider>
      <YourComponent />
    </UploadProvider>
  );
};

export default App;


import React, { useContext } from 'react';
import { UploadContext } from './UploadContext';
import tus from 'tus-js-client';

const YourComponent = () => {
  const { uploads, addUpload } = useContext(UploadContext);

  const handleFileChange = (e) => {
    const files = e.target.files;
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      addUpload(file);
      uploadFile(file);
    }
  };

  const uploadFile = (file) => {
    const upload = new tus.Upload(file, {
      endpoint: 'https://your-tus-server.com/files',
      // Additional Tus.js options as needed
      // ...
    });

    upload.start();
  };

  return (
    <div>
      <input type="file" multiple onChange={handleFileChange} />
      {uploads.map((upload, index) => (
        <div key={index}>{upload.name}</div>
      ))}
    </div>
  );
};

export default YourComponent;



import React, { useEffect, useRef, useState } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const [uppy, setUppy] = useState(null);
  const uppyRef = useRef(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppyInstance = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppyInstance.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the state and ref
    setUppy(uppyInstance);
    uppyRef.current = uppyInstance;

    // Load saved upload state from local storage
    const savedState = localStorage.getItem('uppyState');
    if (savedState) {
      uppyInstance.setState(JSON.parse(savedState));
    }

    // Event listener to save upload state on page unload
    const handleUnload = () => {
      localStorage.setItem('uppyState', JSON.stringify(uppyInstance.getState()));
    };
    window.addEventListener('beforeunload', handleUnload);

    // Clean up Uppy instance and event listener on component unmount
    return () => {
      uppyInstance.close();
      window.removeEventListener('beforeunload', handleUnload);
    };
  }, []);

  if (!uppy) {
    return null; // or return a loading indicator if desired
  }

  return <Dashboard uppy={uppy} />;
};

export default FileUploader;

import React, { useEffect, useRef, useState } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const [uppy, setUppy] = useState(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppyInstance = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppyInstance.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the state
    setUppy(uppyInstance);

    // Clean up Uppy instance on component unmount
    return () => {
      uppyInstance.close();
    };
  }, []);

  if (!uppy) {
    return null; // or return a loading indicator if desired
  }

  return <Dashboard uppy={uppy} />;
};

export default FileUploader;



function getLocalIpAddress() {
 return new Promise((resolve, reject) => {
    const peerConnection = new RTCPeerConnection({ iceServers: [] });
    peerConnection.createDataChannel('');

    peerConnection.onicecandidate = (event) => {
      if (!event.candidate) {
        // No more ICE candidates, resolve with null
        resolve(null);
        return;
      }

      const candidate = event.candidate.candidate;
      const ipAddress = candidate.split(' ')[4];
      if (ipAddress) {
        // Found an IP address, resolve with it
        resolve(ipAddress);
      }
    };

    // Create an offer to trigger icecandidate events
    peerConnection.createOffer()
      .then((offer) => peerConnection.setLocalDescription(offer))
      .catch(reject);
  });
}

// Usage:
getLocalIpAddress()
  .then((ipAddress) => {
    console.log('System IP Address:', ipAddress);
  })
  .catch((error) => {
    console.error('Error retrieving IP Address:', error);
  });
  
  
npm install @uppy/core @uppy/golden-retriever @uppy/react
import React, { useEffect, useRef } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUpload = () => {
  const uppyRef = useRef(null);

  useEffect(() => {
    const uppy = Uppy({
      id: 'uppy',
      autoProceed: true,
    });

    uppy.use(GoldenRetriever, {
      expires: 2 * 60 * 1000, // Set the expiration time for the upload session (in this case, 2 minutes)
    });

    uppyRef.current = uppy;

    return () => {
      uppy.close();
    };
  }, []);

  return (
    <div>
      <Dashboard uppy={uppyRef.current} inline={true} />
    </div>
  );
};

export default FileUpload;

import React, { useEffect, useRef } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const uppyRef = useRef(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppy = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppy.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the ref
    uppyRef.current = uppy;

    // Clean up Uppy instance on component unmount
    return () => {
      uppy.close();
    };
  }, []);

  return <Dashboard uppy={uppyRef.current} />;
};

export default FileUploader
