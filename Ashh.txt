import React, { useEffect, useRef, useState } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const [uppy, setUppy] = useState(null);
  const uppyRef = useRef(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppyInstance = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppyInstance.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the state and ref
    setUppy(uppyInstance);
    uppyRef.current = uppyInstance;

    // Load saved upload state from local storage
    const savedState = localStorage.getItem('uppyState');
    if (savedState) {
      uppyInstance.setState(JSON.parse(savedState));
    }

    // Event listener to save upload state on page unload
    const handleUnload = () => {
      localStorage.setItem('uppyState', JSON.stringify(uppyInstance.getState()));
    };
    window.addEventListener('beforeunload', handleUnload);

    // Clean up Uppy instance and event listener on component unmount
    return () => {
      uppyInstance.close();
      window.removeEventListener('beforeunload', handleUnload);
    };
  }, []);

  if (!uppy) {
    return null; // or return a loading indicator if desired
  }

  return <Dashboard uppy={uppy} />;
};

export default FileUploader;

import React, { useEffect, useRef, useState } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const [uppy, setUppy] = useState(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppyInstance = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppyInstance.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the state
    setUppy(uppyInstance);

    // Clean up Uppy instance on component unmount
    return () => {
      uppyInstance.close();
    };
  }, []);

  if (!uppy) {
    return null; // or return a loading indicator if desired
  }

  return <Dashboard uppy={uppy} />;
};

export default FileUploader;



function getLocalIpAddress() {
 return new Promise((resolve, reject) => {
    const peerConnection = new RTCPeerConnection({ iceServers: [] });
    peerConnection.createDataChannel('');

    peerConnection.onicecandidate = (event) => {
      if (!event.candidate) {
        // No more ICE candidates, resolve with null
        resolve(null);
        return;
      }

      const candidate = event.candidate.candidate;
      const ipAddress = candidate.split(' ')[4];
      if (ipAddress) {
        // Found an IP address, resolve with it
        resolve(ipAddress);
      }
    };

    // Create an offer to trigger icecandidate events
    peerConnection.createOffer()
      .then((offer) => peerConnection.setLocalDescription(offer))
      .catch(reject);
  });
}

// Usage:
getLocalIpAddress()
  .then((ipAddress) => {
    console.log('System IP Address:', ipAddress);
  })
  .catch((error) => {
    console.error('Error retrieving IP Address:', error);
  });
  
  
npm install @uppy/core @uppy/golden-retriever @uppy/react
import React, { useEffect, useRef } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUpload = () => {
  const uppyRef = useRef(null);

  useEffect(() => {
    const uppy = Uppy({
      id: 'uppy',
      autoProceed: true,
    });

    uppy.use(GoldenRetriever, {
      expires: 2 * 60 * 1000, // Set the expiration time for the upload session (in this case, 2 minutes)
    });

    uppyRef.current = uppy;

    return () => {
      uppy.close();
    };
  }, []);

  return (
    <div>
      <Dashboard uppy={uppyRef.current} inline={true} />
    </div>
  );
};

export default FileUpload;

import React, { useEffect, useRef } from 'react';
import Uppy from '@uppy/core';
import GoldenRetriever from '@uppy/golden-retriever';
import { Dashboard } from '@uppy/react';

const FileUploader = () => {
  const uppyRef = useRef(null);

  useEffect(() => {
    // Create Uppy instance and configure it
    const uppy = Uppy({
      debug: true,
      autoProceed: false, // We'll handle uploading manually
    });

    // Add the GoldenRetriever plugin
    uppy.use(GoldenRetriever, {
      expires: 24 * 60 * 60 * 1000, // 24 hours in milliseconds
    });

    // Save the Uppy instance to the ref
    uppyRef.current = uppy;

    // Clean up Uppy instance on component unmount
    return () => {
      uppy.close();
    };
  }, []);

  return <Dashboard uppy={uppyRef.current} />;
};

export default FileUploader
