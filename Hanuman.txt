// Inside your FlightRouteMap component

const FlightMap = () => {
  useEffect(() => {
    // Enable themes and create a map instance
    am4core.useTheme(am4themes_animated);
    let chart = am4core.create('chartdiv', am4maps.MapChart);
    chart.geodata = am4geodata_worldLow;
    chart.projection = new am4maps.projections.Miller();

    // Create map series
    let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());
    polygonSeries.useGeodata = true;

    // Customize map appearance, e.g., color each country differently
    polygonSeries.mapPolygons.template.fill = am4core.color('#74B266');
    polygonSeries.mapPolygons.template.stroke = am4core.color('#FFFFFF');
    polygonSeries.mapPolygons.template.strokeWidth = 0.5;

    // Create location icons for each country
    let imageSeries = chart.series.push(new am4maps.MapImageSeries());
    let imageTemplate = imageSeries.mapImages.template;
    imageTemplate.propertyFields.latitude = 'latitude';
    imageTemplate.propertyFields.longitude = 'longitude';

    // Add your demo data with location and color information
    // Replace this with your actual data
    const countryData = [
      { country: 'USA', latitude: 37.0902, longitude: -95.7129, color: '#FF5733' },
      // Add more countries and their data
    ];

    // Loop through your data and create location icons
    for (let i = 0; i < countryData.length; i++) {
      let dataItem = countryData[i];
      let image = imageSeries.mapImages.create();
      image.latitude = dataItem.latitude;
      image.longitude = dataItem.longitude;

      // Customize icon appearance
      let circle = image.createChild(am4core.Circle);
      circle.radius = 8;
      circle.fill = am4core.color(dataItem.color);

      // You can add more details or interactivity to these icons if needed
    }

    // Clean up when the component unmounts
    return () => {
      chart.dispose();
    };
  }, []);

  return <div id="chartdiv" style={{ width: '100%', height: '500px' }}></div>;
};

export default FlightMap;



// ...

// Define the location icon as a custom SVG path
let locationIcon = imageTemplate.createChild(am4core.Image);
locationIcon.href = 'URL_TO_YOUR_SVG_IMAGE';
locationIcon.width = 20; // Adjust the width of the SVG image
locationIcon.height = 20; // Adjust the height of the SVG image

// Provide dynamic data for the map
imageSeries.data = [
  { cityName: 'City1', value: 100, latitude: 40, longitude: -74 },
  { cityName: 'City2', value: 200, latitude: 35, longitude: 139 },
  // Add more cities with dynamic values and coordinates
];

// ...

import React, { useEffect } from 'react';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4maps from '@amcharts/amcharts4/maps';
import * as am4geodata_worldLow from '@amcharts/amcharts4-geodata/worldLow';
import am4themes_animated from '@amcharts/amcharts4/themes/animated';

function FlightRouteMap() {
  useEffect(() => {
    // Initialize amCharts
    am4core.useTheme(am4themes_animated);
    let chart = am4core.create('chartdiv', am4maps.MapChart);

    // Set map data
    chart.geodata = am4geodata_worldLow;

    // Create a map polygon series for your destination cities
    let series = chart.series.push(new am4maps.MapPolygonSeries());
    series.useGeodata = true;

    // Configure your location icons with dynamic values
    let city = series.mapPolygons.template;
    city.tooltipText = '{name}';
    city.fill = am4core.color('#277A60');
    city.fillOpacity = 0.8;
    city.nonScalingStroke = true;
    city.strokeWidth = 0.5;

    // Add location icons
    let imageSeries = chart.series.push(new am4maps.MapImageSeries());
    let imageTemplate = imageSeries.mapImages.template;
    imageTemplate.propertyFields.longitude = 'longitude';
    imageTemplate.propertyFields.latitude = 'latitude';
    imageTemplate.nonScaling = true;
    imageTemplate.tooltipText = '{cityName}: {value}';
    
    // Define the location icon as an SVG path (you can customize this)
    let circle = imageTemplate.createChild(am4core.Circle);
    circle.radius = 8;
    circle.fill = am4core.color('#FF5733');
    circle.stroke = am4core.color('#FFFFFF');
    circle.strokeWidth = 2;

    // Provide dynamic data for the map
    imageSeries.data = [
      { cityName: 'City1', value: 100, latitude: 40, longitude: -74 },
      { cityName: 'City2', value: 200, latitude: 35, longitude: 139 },
      // Add more cities with dynamic values and coordinates
    ];

    // Finally, add any routes or connections between the cities if needed

    return () => {
      // Clean up when the component unmounts
      chart.dispose();
    };
  }, []);

  return (
    <div id="chartdiv" style={{ width: '100%', height: '500px' }}></div>
  );
}

export default FlightRouteMap;


import React, { useEffect } from 'react';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4maps from '@amcharts/amcharts4/maps';
import am4themes_animated from '@amcharts/amcharts4/themes/animated';

// Import your location icon image
import LocationIcon from './location-icon.png'; // Replace with the actual image path

function FlightRouteMap() {
  useEffect(() => {
    // Initialize map
    am4core.useTheme(am4themes_animated);
    const chart = am4core.create('map-container', am4maps.MapChart);
    chart.geodata = am4geodata_worldLow;

    // Create map series for destination icons
    const series = chart.series.push(new am4maps.MapImageSeries());

    // Define location data (you can replace this with your own data)
    const locations = [
      { latitude: 40, longitude: -100, color: '#FF5733', number: '1' },
      { latitude: 30, longitude: 20, color: '#33FF57', number: '2' },
      // Add more locations as needed
    ];

    // Create location icons with colors and random numbers
    locations.forEach(location => {
      const icon = series.mapImages.create();
      icon.latitude = location.latitude;
      icon.longitude = location.longitude;
      icon.nonScaling = true;

      // Create the location icon using your image
      const image = icon.createChild(am4core.Image);
      image.href = LocationIcon; // Use the imported location icon image
      image.width = 20;
      image.height = 20;

      const label = icon.createChild(am4core.Label);
      label.text = location.number;
      label.fontSize = 12;
      label.align = 'center';
      label.valign = 'middle';
    });

    // Set map projection and other properties as needed
    chart.projection = new am4maps.projections.Miller();
    chart.zoomControl = new am4maps.ZoomControl();

    // Clean up on unmount
    return () => {
      chart.dispose();
    };
  }, []);

  return (
    <div id="map-container" style={{ width: '100%', height: '500px' }}></div>
  );
}

export default FlightRouteMap;



import React, { useEffect } from 'react';
import * as am4core from '@amcharts/amcharts4/core';
import * as am4maps from '@amcharts/amcharts4/maps';
import am4themes_animated from '@amcharts/amcharts4/themes/animated';

// Import your location icon image
import LocationIcon from './location-icon.png'; // Replace with the actual image path

function FlightRouteMap() {
  useEffect(() => {
    // Initialize map
    am4core.useTheme(am4themes_animated);
    const chart = am4core.create('map-container', am4maps.MapChart);
    chart.geodata = am4geodata_worldLow;

    // Create map series for destination icons
    const series = chart.series.push(new am4maps.MapImageSeries());

    // Define location data (you can replace this with your own data)
    const locations = [
      { latitude: 40, longitude: -100, color: '#FF5733', number: '1' },
      { latitude: 30, longitude: 20, color: '#33FF57', number: '2' },
      // Add more locations as needed
    ];

    // Create location icons with colors and random numbers
    locations.forEach(location => {
      const icon = series.mapImages.create();
      icon.latitude = location.latitude;
      icon.longitude = location.longitude;
      icon.nonScaling = true;

      // Create the location icon using your image
      const image = icon.createChild(am4core.Image);
      image.href = LocationIcon; // Use the imported location icon image
      image.width = 20;
      image.height = 20;
      image.fill = am4core.color(location.color); // Set icon color based on input data

      const label = icon.createChild(am4core.Label);
      label.text = location.number;
      label.fontSize = 12;
      label.align = 'center';
      label.valign = 'middle';
    });

    // Set map projection and other properties as needed
    chart.projection = new am4maps.projections.Miller();
    chart.zoomControl = new am4maps.ZoomControl();

    // Clean up on unmount
    return () => {
      chart.dispose();
    };
  }, []);

  return (
    <div id="map-container" style={{ width: '100%', height: '500px' }}></div>
  );
}

export default FlightRouteMap;
